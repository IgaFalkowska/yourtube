/*
 * This file is generated by jOOQ.
 */
package com.example.yourtubebackend.jooq.tables;


import com.example.yourtubebackend.jooq.Keys;
import com.example.yourtubebackend.jooq.Public;
import com.example.yourtubebackend.jooq.tables.records.VideoRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Video extends TableImpl<VideoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.video</code>
     */
    public static final Video VIDEO = new Video();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VideoRecord> getRecordType() {
        return VideoRecord.class;
    }

    /**
     * The column <code>public.video.id</code>.
     */
    public final TableField<VideoRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.video.title</code>.
     */
    public final TableField<VideoRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.video.description</code>.
     */
    public final TableField<VideoRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.video.filename</code>.
     */
    public final TableField<VideoRecord, UUID> FILENAME = createField(DSL.name("filename"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.video.tags</code>.
     */
    public final TableField<VideoRecord, String[]> TAGS = createField(DSL.name("tags"), SQLDataType.VARCHAR(20).getArrayDataType(), this, "");

    /**
     * The column <code>public.video.created_on</code>.
     */
    public final TableField<VideoRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.video.system_user_id</code>.
     */
    public final TableField<VideoRecord, Long> SYSTEM_USER_ID = createField(DSL.name("system_user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Video(Name alias, Table<VideoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Video(Name alias, Table<VideoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.video</code> table reference
     */
    public Video(String alias) {
        this(DSL.name(alias), VIDEO);
    }

    /**
     * Create an aliased <code>public.video</code> table reference
     */
    public Video(Name alias) {
        this(alias, VIDEO);
    }

    /**
     * Create a <code>public.video</code> table reference
     */
    public Video() {
        this(DSL.name("video"), null);
    }

    public <O extends Record> Video(Table<O> child, ForeignKey<O, VideoRecord> key) {
        super(child, key, VIDEO);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<VideoRecord, Long> getIdentity() {
        return (Identity<VideoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VideoRecord> getPrimaryKey() {
        return Keys.VIDEO_PKEY;
    }

    @Override
    public List<UniqueKey<VideoRecord>> getKeys() {
        return Arrays.<UniqueKey<VideoRecord>>asList(Keys.VIDEO_PKEY, Keys.VIDEO_FILENAME_KEY);
    }

    @Override
    public List<ForeignKey<VideoRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VideoRecord, ?>>asList(Keys.VIDEO__VIDEO_SYSTEM_USER_ID_FKEY);
    }

    private transient SystemUser _systemUser;

    public SystemUser systemUser() {
        if (_systemUser == null)
            _systemUser = new SystemUser(this, Keys.VIDEO__VIDEO_SYSTEM_USER_ID_FKEY);

        return _systemUser;
    }

    @Override
    public Video as(String alias) {
        return new Video(DSL.name(alias), this);
    }

    @Override
    public Video as(Name alias) {
        return new Video(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Video rename(String name) {
        return new Video(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Video rename(Name name) {
        return new Video(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, UUID, String[], OffsetDateTime, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
